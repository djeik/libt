local t = loadfile("libt")()
  or error("failed to load libt")

local vec3 = t.requireStrict("libvec3")
local tmsg = t.requireStrict("libtmsg")
local dir = t.requireStrict("libdirection")

local tmove = {}

tmove.VERSION = { 0, 0, 1, 0 }
tmove.BlockDataEndpoint = "BlockDataConsumer"

-- | Gets the position of the turtle as a
-- vec3 object.
function tmove.getPosition()
  local h = fs.open("profile", "r")
    or error("no profile")
  local p = textutils.unserialize(h.readAll())
  return vec3.new(p.xPos, p.yPos, p.zPos)
end

-- | Gets the facing of the turtle. See
-- `libdirection` for more information about
-- facing.
function tmove.getFacing()
  local h = fs.open("profile", "r")
    or error("no profile")
  local p = textutils.unserialize(h.readAll())
  return p.facing
end

-- | Splits block data string by colon
-- and return string for modname, and
-- string for block name.
function tmove.splitByColon(s)
  local modname, blockname
  local a = t.consume(
    string:gmatch(s, "[^:]+:[^:]+")
  )
  modname = a[1]
  blockname = a[2]
end

-- | Detect blocks above, below, and in
-- front of turtle given vec3 position and
-- facing of turtle. Sends block data to
-- BlockDataEndpoint.
function tmove.detectBlocks(v, f)
  local blockData = {}

  local uSuccess, uData = turtle.inspectUp()
  local fSuccess, fData = turtle.inspect()
  local dSuccess, dData = turtle.inspectDown()

  local uVec3 = dir.getUp(v, f)
  local fVec3 = dir.getForward(v, f)
  local dVec3 = dir.getDown(v, f)

  if uSuccess then
    blockData[uVec3] = uData
  else -- Then it's air
    blockData[uVec3] = "minecraft:air"
  end

  if fSuccess then
    blockData[fVec3] = fData
  else -- Then it's air
    blockData[fVec3] = "minecraft:air"
  end

  if dSuccess then
    blockData[dVec3] = dData
  else -- Then it's air
    blockData[dVec3] = "minecraft:air"
  end

  if not tmsg.send(
    tmove.BlockDataEndpoint,
    blockData) then
    error("libtmsg is not working" +
    " when sending to BlockDataEndpoint.")
  end
end

function tmove.u()
  local h = fs.open("profile", "r")
    or error("no profile")
  local p = textutils.unserialize(h.readAll())
  h.close()
  if turtle.up() then
    p.yPos = p.yPos + 1

    local f = fs.open("profile", "w")
    f.write(textutils.serialize(p))
    f.close()
    return true
  else
    return false
  end
end

function tmove.f()
  local h = fs.open("profile", "r")
  local p = textutils.unserialize(h.readAll())
  h.close()
  if turtle.forward() then
    if p.facing == 0 then
      p.zPos = p.zPos + 1
    elseif p.facing == 1 then
      p.xPos = p.xPos - 1
    elseif p.facing == 2 then
      p.zPos = p.zPos - 1
    else
      p.xPos = p.xPos + 1
    end

    local f = fs.open("profile", "w")
    f.write(textutils.serialize(p))
    f.close()
    return true

  else
    return false
  end
end

function tmove.b()
  local h = fs.open("profile", "r")
  local p = textutils.unserialize(h.readAll())
  h.close()
  if turtle.back() then

    if p.facing == 0 then
      p.zPos = p.zPos - 1
    elseif p.facing == 1 then
      p.xPos = p.xPos + 1
    elseif p.facing == 2 then
      p.zPos = p.zPos + 1
    else
      p.xPos = p.xPos - 1
    end

    local f = fs.open("profile", "w")
    f.write(textutils.serialize(p))
    f.close()
    return true

  else
    return false
  end
end

function tmove.d()
  local h = fs.open("profile", "r")
  local p = textutils.unserialize(h.readAll())
  h.close()
  if turtle.down() then
    p.yPos = p.yPos - 1
    local f = fs.open("profile", "w")
    f.write(textutils.serialize(p))
    f.close()
    return true
  else
    return false
  end
end

function tmove.l()
  local h = fs.open("profile", "r")
  local p = textutils.unserialize(h.readAll())
  h.close()
  if turtle.turnLeft() then
    p.facing = (p.facing - 1) % 4
    local f = fs.open("profile", "w")
    f.write(textutils.serialize(p))
    f.close()
    return true
  else
    return false
  end
end

function tmove.r()
  local h = fs.open("profile", "r")
  local p = textutils.unserialize(h.readAll())
  h.close()
  if turtle.turnRight() then
    p.facing = (p.facing + 1) % 4
    local f = fs.open("profile", "w")
    f.write(textutils.serialize(p))
    f.close()
    return true
  else
    return false
  end
end

function tmove.move(s)
  for c in s:gmatch"." do
    if c == "u" then
      tmove.u()
    elseif c == "d" then
      tmove.d()
    elseif c == "l" then
      tmove.l()
    elseif c == "r" then
      tmove.r()
    elseif c == "f" then
      tmove.f()
    elseif c == "b" then
      tmove.b()
    else
      error("bad movement input.")
    end
    local pos = tmove.getPosition()
    local face = tmove.getFacing()
    tmove.detectBlocks(pos, face)
  end
end

return tmove
-- vim: ft=lua sw=2 expandtab tw=45
