local t = loadfile("libt")()
  or error("failed to load libt")

local tmsg = {}

-- don't requireStrict because libtmsg can be
-- used without JSON support
local json = t.require("libjson")

tmsg.DEBUG = false
tmsg.DEFAULT_PERIOD = 0.1

tmsg.VERSION = { 0, 0, 1, 0 }

tmsg.CONNECTION = {
    HOST = "localhost",
    PORT = 8080,
    PREFIX = "",
}

local function debug(...)
  local args = { ... }
  if tmsg.DEBUG then
    print(unpack(args))
  end
end

local function mkUrl(id)
  return "http://" ..
  tmsg.CONNECTION.HOST .. ":" ..
  tostring(tmsg.CONNECTION.PORT) ..
  tmsg.CONNECTION.PREFIX .. id
end

tmsg.CONTENT_TYPE = {
  PLAIN_TEXT = "text/plain; charset=utf-8",
  JSON = "application/json",
  ANY = "*/*",
}

function tmsg.clearMessages(id)
  local headers = {}
  headers["Content-Type"] = tmsg.CONTENT_TYPE.PLAIN_TEXT
  headers["Accept"] = tmsg.CONTENT_TYPE.ANY
  local url = mkUrl(id) .. "/clear"
  local result = http.post(url, "", headers)
  if result == nil then
    debug("CLEAR (FAILED) - ", url, " - ")
    return nil
  end
  debug("CLEAR (SUCCESS) - ", url, " - ")
  return tonumber(result.readAll())
end

function tmsg.send(id, msg, contentType, accept)
  local contentType = contentType
    or tmsg.CONTENT_TYPE.PLAIN_TEXT
  local accept = accept
    or tmsg.CONTENT_TYPE.ANY

  local headers = {}
  headers["Content-type"] = contentType
  headers["Accept"] = accept
  local url = mkUrl(id)
  local result = http.post(url, msg, headers)
  if result == nil then
    debug("POST (FAILED) - ", url, " - ")--, msg)
    return nil
  end
  debug("POST (SUCCESS) - ", url, " - ", msg)
  return result.readAll()
end

function tmsg.sendBlockData(tab)
  local msg = textutils.serialise(tab)
  local headers = {}
  local url = "http://" ..
    tmsg.CONNECTION.HOST .. ":" ..
    tostring(tmsg.CONNECTION.PORT) ..
    "/blockdata"
  headers["Content-type"] = "text/plain; charset=utf-8"
  headers["Accept"] = "text/plain; charset=utf-8"
  result = http.post(url, msg, headers)
  if result == nil then
    debug("POST (FAILED) - ", url, " - ", msg)
    return false
  end
  debug("POST (SUCCESS) - ", url, " - ", msg)
  return true
end

function tmsg.recv(id, accept)
  local accept = accept
    or tmsg.CONTENT_TYPE.ANY
  local url = mkUrl(id)
  local result = http.get(url, { Accept = accept })
  if result == nil then
    debug("GET (FAILED) - ", url)
    return nil
  end
  local f = result.readAll()
  if f == "" then
    debug("GET (EMPTY) - ", url)
    return nil
  end
  debug("GET (SUCCESS) - ", url)
  return f
end

function tmsg.recvBlock(id, accept, timeout, period)
  local period = period or tmsg.DEFAULT_PERIOD
  local accept = accept or tmsg.CONTENT_TYPE.ANY

  local time = 0

  while true do
    local response = tmsg.recv(id)
    if response == nil then
      sleep(period)
      time = time + period
      if timeout and time >= timeout then
        return nil
      end
    else
      return response
    end
  end
end

function tmsg.sendLua(id, tab)
  return tmsg.send(id, t.show(tab))
end

function tmsg.recvLua(...)
  return t.read(tmsg.recv(...))
end

function tmsg.recvLuaBlock(...)
  local result = rmsg.recvBlock(...)
  if result == nil then
    return nil
  else
    return t.read(result)
  end
end

if json ~= nil then
  function tmsg.sendJSON(id, data, parse)
    local result = tmsg.send(
      id,
      json:encode(data),
      tmsg.CONTENT_TYPE.JSON,
      tmsg.CONTENT_TYPE.JSON
    )

    if parse then
      return json:decode(result)
    else
      return result
    end
  end

  function tmsg.recvJSON(...)
    return json:decode(tmsg.recv(...))
  end

  function tmsg.recvJSONBlock(...)
    local result = tmsg.recvBlock(...)
    if result == nil then
      return nil
    else
      return json:decode(result)
    end
  end
end

return tmsg

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45
