-- REMARK: an input designator is a table
-- that identifies an item. This is done
-- with its idname and it's data value (an
-- integer); the fields are called `idname`
-- and `data`.
-- A data value can be 'nil', in which case
-- any data will match.

local t = loadfile("libt")()
  or error("failed to load libt")

local tput = t.requireStrict("libtput")
local containers = t.requireStrictTg("libcontainers")
local fsutils = t.requireStrictTg("libfs")
local inv = t.requireStrictTg("libinv")
local rmi = t.requireStrictTg('librmi')
local glass = t.requireStrictTg('libglass')

local g = glass.bind()

local function log(...)
  print(...)
  g.log(...)
end

local recipe = {}
recipe.VERSION = {0, 0, 1, 0}

local RECIPE_DIR = 'recipes'

function recipe.path(name)
  return RECIPE_DIR .. "/" .. name
end

local CACHE = {}

function recipe.getRecipeStrict(name)
  if not fs.exists("recipes") then
    fs.makeDir("recipes")
  end
  return tput.getStrict(recipe.path(name))
end

function recipe.exists(name)
  return fs.exists(recipe.path(name))
end

function recipe.load(name, download)
  local r = CACHE[name]

  if r ~= nil then
    return r
  end

  if download == nil then
    download = true
  end

  if not recipe.exists(name) then
    if download then
      recipe.getRecipeStrict(name)
    end
  end

  if recipe.exists(name) then
    local f = loadfile(recipe.path(name))
    if f == nil then
      error('recipe ' .. name .. ' is invalid')
    end
    local r = f()
    CACHE[name] = r
    return r
  else
    return nil
  end
end

function recipe.list()
  return fs.list(RECIPE_DIR)
end

-- | Downloads every recipe.
function recipe.getAll()
  for name in tput.ilist(RECIPE_DIR) do
    recipe.getRecipeStrict(name)
  end
end

function recipe.loadAll()
  recipe.getAll()
  recipe.buildCache()
  local recipes = {}
  for _, r in pairs(CACHE) do
    table.insert(recipes, r)
  end
  return recipes
end

-- | loads every recipe from disk
function recipe.buildCache()
  local l = recipe.list()
  for name in t.from(l) do
    recipe.loadStrict(name, false)
  end
end

function recipe.loadStrict(name, ...)
  return recipe.load(name, ...)
    or error('failed to load recipe ' .. name)
end

-- | given a recipe, constructs a table
-- sending inputstrings to a count of how
-- many are needed to craft the recipe.
function recipe.inputs(r)
  local d = containers.defaultdict.new(
    function()
      return 0
    end
  )

  for _, item in pairs(r.shape) do
    local s = t.show(item)
    d[s] = d[s] + (r.times or 1)
  end

  return d
end

local function getCheck(k)
  return recipe.checks[k]
    or error('unknown search condition ' .. k)
end

recipe.checks = {
  outputIdname = function(r, idname)
    return r.output.item.idname == idname
  end,

  outputAtLeast = function(r, count)
    return r.output.count >= count
  end,

  outputExactly = function(r, count)
    return r.output.count == count
  end,

  outputData = function(r, data)
    return data == nil or r.output.item.data == data
  end,

  -- | recursive check
  any = function(r, search)
    for k, v in pairs(search) do
      local f = getCheck(k)
      if f(r, v) then
        return true
      end
    end

    return false
  end,
}

function recipe.match(r, options)
  for k, v in pairs(options) do
    local f = getCheck(k)
    if not f(r, v) then
      return false
    end
  end
  return true
end

-- | Searches through a list of recipes.
-- `search` is a table specifying the query.
-- See implementation of `match` for
-- possible keys.
function recipe.search(recipes, search)
  local oks = {}
  for r in t.from(recipes) do
    if recipe.match(r, search) then
      table.insert(oks, r)
    end
  end
  return oks
end

function recipe.formatItem(item)
  local data = item.data and tostring(item.data) or '*'
  return item.idname .. '-' .. data
end

-- | Returns the number of times that a
-- recipe must be crafted to produce at
-- least `count` many of its output item.
function recipe.times(r, count)
  local c = r.output.count
    or error(
      'recipe for ' ..
      recipe.formatItem(r.output.item) ..
      ' has no output count'
    )
  return math.ceil(count / c)
end

-- | Compares two output counts to a desired
-- count.
-- Returns true if c1 better matches the
-- desired count than c2.
function recipe.cmpOutput(desired, c1, c2)
  if c1 == desired then
    return true
  end
  if c2 == desired then
    return false
  end
  if c1 > desired and c2 < desired then
    return true
  end
  if c1 < desired and c2 > desired then
    return false
  end
  if c1 > desired and c2 > desired then
    return c1 < c2
  end
  if c1 < desired and c2 < desired then
    return c1 > c2
  end
end

function recipe.mkCmpOutput(desired)
  return function(c1, c2)
    return recipe.cmpOutput(desired, c1, c2)
  end
end

-- | computes the crafting strategy to
-- produce `count` many (default 1) of
-- `idname` given the available inventory
-- `items`.
-- `items` is a list of pairs of LP
-- ItemIdentifiers and quantities. (This is
-- exactly what getAvailableItems() gives.)
-- A crafting strategy is simply a list of
-- recipes, which must be crafted in order.
-- If the given idname cannot be crafted,
-- the first return value is nil, and the
-- second is a human-readable string
-- explaining why.
function recipe.craftStrategy(item, items, count, allRecipes)
  allRecipes = allRecipes or recipe.loadAll()

  count = count or 1
  local already, iid, ix = inv.lookup(item, items)
  if already >= count then
    -- if we already have the necessary
    -- items, then we discount the number we
    -- need to take from the item store and
    -- produce an empty list of recipes to
    -- perform.
    log(
      recipe.formatItem(item),
      ' ',
      already,
      ' -> ',
      already - count
    )

    if ix ~= nil then
      items[ix].amount = already - count
    end

    return {}, {}
  end

  -- consume all the ones we have, if we
  -- have any
  if ix ~= nil then
    items[ix].amount = 0
  end

  -- compute the new count of guys we need
  local origCount = count
  if already ~= 0 then
    count = count - already
  end

  -- find all recipes that produce this item
  local rs = recipe.search(
    allRecipes, {
      outputIdname = item.idname,
      outputData = item.data,
    }
  )

  if #rs == 0 then
    -- false plus a list of errors, in this
    -- case a singleton
    return {}, {
      {
        item = item,
        info = {
          have = already,
          need = origCount,
        },
      },
    }
  end

  -- find the best recipe
  local cmp = recipe.mkCmpOutput(count)
  table.sort(rs, cmp)
  local r = rs[1] -- take the best one
  -- print('best recipe produces ', r.output.count)

  -- now we took the best one, but it's
  -- possible that the best recipe produces
  -- too few, so we might need to repeat it

  local times = recipe.times(r, count)
  -- storing the times inside the recipe
  -- makes things aware of repetitions!
  r.times = times
  -- print('so we will need to use it ', times, ' times')

  -- normally, inputs gives the input counts
  -- for one repetition, but by storing the
  -- times inside, these counts are
  -- automatically multiplied.
  local inputs = recipe.inputs(r)

  -- prepare the crafting strategy.
  -- `r` is going to go last in here, but
  -- first we need to put in the strategies
  -- for all its inputs.
  local result = {}
  local errors = {}

  -- k is the itemstring of the input, c is its
  -- count
  for s, c in pairs(inputs) do
    local item = t.read(s)
    local strats, newErrors = recipe.craftStrategy(item, items, c, allRecipes)
    t.extend(result, strats)
    t.extend(errors, newErrors)
  end

  r.times = times
  table.insert(result, r)

  return result, errors
end

-- | Given a list of errors produced by
-- craftStrategy, collapse common items and
-- add up their counts.
function recipe.groupErrors(errors)
  local r = containers.defaultdict.new(
    function() return {have = 0, need = 0} end,
    true
  )
  for e in t.from(errors) do
    r[t.show(e.item)].have = r[t.show(e.item)].have + e.info.have
    r[t.show(e.item)].need = r[t.show(e.item)].need + e.info.need
  end
  local s = {}
  for k, v in pairs(r) do
    local i = t.read(k)
    table.insert(
      s, {
        item = i,
        info = v,
      }
    )
  end
  return s
end

return recipe

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45 tw=44
