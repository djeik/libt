-- tput is a client library for the Files API of a remote
-- tput-server. See https://github.com/tsani/tput-servant
--
-- tput defines three functions:
-- * tput.get(FILE) downloads FILE from the remote server and saves it
--   with the same name locally, overwriting an existing file by that
--   name.
-- * tput.put(FILE) uploads FILE to the remote server with the same
--   name with similar overwriting behaviour.
-- * tput.list() obtains a list of all available files on the remote
--   server.
--
-- By default, the remote server is assumed to be on localhost:8080,
-- but this can be adjusted via a configuration file placed in
-- /etc/tput
-- The configuration is loaded at module load time. To reload the
-- configuration you will need to either restart the computer or flush
-- the global module cache. See libt for more details on the latter
-- approach.
--
-- The configuration file is must contain a lua table with the
-- following keys:
-- * HOST : the hostname of the remote server
-- * PORT : the application on the remote server
-- * SCHEME : either "http" or "https"

local DEFAULT_CONNECTION = {
  SCHEME = "https",
  HOST = "localhost",
  PORT = 8080
}

local function loadConfig()
  local h = fs.open ("/etc/tput", "r")
  if h == nil then
    return DEFAULT_CONNECTION
  end
  local connection =
    textutils.unserialize(h.readAll()) or
    error "libtput: syntax error in /etc/tput"
  if not ("table" == type(connection)) then
    error "libtput: /etc/tput does not define a table"
  end
  if not ("string" == type(connection.HOST)) then
    error "libtput: /etc/tput does not define a HOST string"
  end
  if not ("number" == type(connection.PORT)) then
    error "libtput: /etc/tput does not define a PORT number"
  end
  if not ("http" == connection.SCHEME or "https" == connection.SCHEME) then
    error "libtput: /etc/tput does not define SCHEME as \"http\" or \"https\""
  end
  return connection
end

local tput = {
  VERSION = { 0, 0, 1, 0 },
  CONNECTION = loadConfig()
}

local function mkUrl(append)
  return tput.CONNECTION.SCHEME .. "://" ..
    tput.CONNECTION.HOST ..
    ":" ..
    tostring(tput.CONNECTION.PORT) ..
    append
end

local function mkFileUrl(file)
  return mkUrl(
    "/files/" ..
    textutils.urlEncode(file)
  )
end

-- | Downloads a file and saves it to disk.
-- Returns a boolean representing success.
function tput.get(file)
  local result = http.get(
    mkFileUrl(file),
    {
      Accept = "*/*"
    }
  )
  if result == nil then
    return false
  end
  local h = fs.open(file, "w")
  h.write(result.readAll())
  h.close()
  return true
end

function tput.getStrict(file)
  local result = tput.get(file)
  if result then
    return result
  else
    error(
      "libtput: " .. file .. ": " ..
      "file not found."
    )
  end
end

-- invokes loadfile after downloading the file.
function tput.loadfile(file)
  tput.getStrict(file)
  return loadfile(file)
end

-- | Reads a file and uploads it to TPut.
function tput.put(file)
  -- read the file
  local h = fs.open(file, 'r')
  local text = h.readAll()
  h.close()

  -- prepare the HTTP headers
  local headers = {}
  headers["Content-type"] = "text/plain; charset=utf-8"
  headers["Accept"] = "text/plain; charset=utf-8"

  -- send the POST request
  local result = http.post(
    mkFileUrl(file),
    text,
    headers
  )

  -- return the result
  return result
end

-- the ilist and list functions are available only if libt is actually
-- present.

local t = pcall(function () return loadfile("libt")() end)

if nil ~= t then
  -- | Returns an array of strings.
  -- The dir parameter defaults to the root.
  function tput.ilist(dir)
    local headers = {}
    headers["Content-type"] = "text/plain; charset=utf-8"
    headers["Accept"] = "text/plain; charset=utf-8"

    local url = nil
    if dir == nil then
      url = mkUrl("/list")
    else
      url = mkUrl("/list/" .. textutils.urlEncode(dir))
    end

    local result = http.get(
      url, {
        Accept = "*/*",
           }
    )

    if result == nil then
      return false
    end

    local s = result.readAll()
    return t.splitBy(s, '\n')
  end

  function tput.list(...)
    return t.consume(tput.ilist(...))
  end
end

return tput

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45
