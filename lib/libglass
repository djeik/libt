-- library for managing a terminal glasses HUD

local t = loadfile('libt')()

local glass = {}
glass.VERSION = { 0, 0, 1, 0 }

-- remote API

-- | Gets the glass proxy object.
function glass.bind()
  local rmi = t.requireStrictTg('librmi')
  local g = rmi.bind(
    'glass', {
      replies = rmi.replies.none,
    }
  )
  local tab = {}
  setmetatable(
    tab, {
      __index = function(tab, key)
        return function(...)
          return g.glass(key, ...)
        end
      end,
    }
  )
  return tab
end

-- local utilities

glass.state = {}
glass.state.PATH = '/.glass-state'

glass.LOG_LINES = 20
glass.LINE_HEIGHT = 10
glass.LINE_xOFF = 5
glass.LINE_yOFF = 5
glass.TEXTAREA_HEIGHT = glass.LINE_HEIGHT * glass.LOG_LINES + 2 * glass.LINE_yOFF
glass.ICON_SIDE = 16

local recipeDrawStrat = {
  craft = function(p, r)
    local X0 = glass.LINE_xOFF
    local Y0 = glass.TEXTAREA_HEIGHT + glass.LINE_yOFF

    for i in t.irange(0, 2) do
      for j in t.irange(0, 2) do
        p.addBox(
          X0 + i * glass.ICON_SIDE,
          Y0 + j * glass.ICON_SIDE,
          glass.ICON_SIDE,
          glass.ICON_SIDE,
          0x000000,
          0.6
        )
      end
    end

    for i, item in pairs(r.shape) do
      local x = X0 + glass.ICON_SIDE * ((i-1) % 3)
      local y = Y0 + glass.ICON_SIDE * math.floor((i-1) / 3)
      p.addIcon(x, y, item.idname, item.data or 0)
    end

    p.addBox(
      X0 + 5 * glass.ICON_SIDE,
      Y0 + glass.ICON_SIDE,
      glass.ICON_SIDE,
      glass.ICON_SIDE,
      0x000000,
      0.6
    )

    p.addIcon(
      X0 + 5 * glass.ICON_SIDE,
      Y0 + glass.ICON_SIDE,
      r.output.item.idname,
      r.output.item.data or 0
    )

  end,
}

glass.state.functions = {
  save = function(self)
    local h = fs.open(glass.state.PATH, 'w')
    h.write(t.show(self))
    h.close()
  end,

  upgrade = function(self)
    if not self._log then
      self._log = {}
    end
  end,

  log = function(self, ...)
    local ARGS = t.map(tostring, { ... })
    local msg = table.concat(ARGS, '')
    table.insert(self._log, msg)
    while #self._log > glass.LOG_LINES do
      table.remove(self._log, 1)
    end
  end,

  clearLog = function(self)
    self._log = {}
  end,

  setRecipe = function(self, r)
    self._recipe = r
  end,

  draw = function(self)
    local p = peripheral.find('openperipheral_bridge')
      or error('no bridge')
    p.clear()

    self:_drawLog(p, self._log)
    if self._recipe ~= nil then
      self:_drawRecipe(p, self._recipe)
    end

    p.sync()
  end,

  _drawRecipe = function(self, p, r)
    return recipeDrawStrat[r.type](p, r)
  end,

  _drawLog = function(self, p, log)
    for i, msg in ipairs(log) do
      local x = glass.LINE_xOFF
      local y = (i - 1) * glass.LINE_HEIGHT + glass.LINE_yOFF
      p.addText(x, y, msg, 0xffffff)
    end
  end,
}

glass.state.mt = {
  __index = glass.state.functions,
}

function glass.state.load()
  local h = fs.open(glass.state.PATH, 'r')
  if h == nil then
    return glass.state.new()
  end
  local s = h.readAll()
  local state = t.read(s)
  if state == nil then
    print('state is corrupted; created new')
    return glass.state.new()
  end
  setmetatable(state, glass.state.mt)
  state:upgrade()
  return state
end

function glass.state.new()
  local self = {}
  setmetatable(self, glass.state.mt)
  self:upgrade()
  return self
end

function glass.state.with(f)
  local self = glass.state.load()
  local status, result = pcall(
    function()
      return f(self)
    end
  )

  if status then
    self:save()
  else
    error(result)
  end
end

return glass

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45 tw=44
