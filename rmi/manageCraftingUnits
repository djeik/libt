local ARGS = {...}
local COMMAND = table.remove(ARGS, 1)

local t = loadfile("libt")()
  or error("failed to load libt")
local reply = t.requireStrictTg('libreply')
reply.clearReplies()
local rmi = t.requireStrictTg('librmi')

local planner = t.requireStrictTg("libplanner")

local commands = {}

function commands.add(state, name)
  if commands.get(state, name) then
    error('crafting unit ' .. name .. ' is already registered')
  end

  state.craftingUnits[name] = {
    status = 'available',
  }

  return true
end

function commands.delete(state, name)
  local u = commands.checkStrict(state, name)

  if u.status ~= 'available' then
    error(
      'cannot delete unit ' .. name ..
      'in use by ' .. tostring(u.owner)
    )
  end

  state.craftingUnits[name] = nil

  return true
end

function commands.get(state, name)
  return state.craftingUnits[name]
end

function commands.checkStrict(state, name)
  local u = commands.get(state, name)
  if not u then
    error("No such crafting unit " .. name)
  end
  return u
end

function commands.isAvailable(state, name)
  local u = commands.checkStrict(state, name)
  return u.status == 'available'
end

function commands.acquire(state, name, ownerName)
  local u = commands.checkStrict(state, name)

  if u.status ~= 'available' then
    error("crafting unit " .. name .. " is not available")
  end

  u.status = "unavailable"
  u.owner = ownerName

  return true
end

function commands.reset(state, name)
  local u = commands.checkStrict(state, name)
  if u.status ~= 'available' then
    error('crafting unit ' .. name .. ' cannot be reset as it is unavailable')
  end
  local unit = rmi.bind(name)
  unit.resetCraftingUnit()
end

function commands.release(state, name)
  if commands.isAvailable(state, name) then
    error("crafting unit " .. name .. " is already available")
  end

  state.craftingUnits[name].status = 'available'
  state.craftingUnits[name].owner = nil
end

function commands.acquireNextAvailable(state, ownerName)
  for name, v in pairs(state.craftingUnits) do
    if v.status == 'available' then
      commands.acquire(state, name, ownerName)
      return name
    end
  end
  return nil
end

local function main(state)
  print('executing: ', COMMAND)
  print('state: ', textutils.serialize(state))
  print('args: ', textutils.serialize(ARGS))
  local f = commands[COMMAND]
    or error('no such command ' .. COMMAND)
  return f(state, unpack(ARGS))
end

return planner.withState(main)

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45 tw=44
