-- | libreply compatible code to cause a
-- computer attached to a logistics request
-- pipe to make a request for a given
-- quantity of an item.
--
-- The arguments are:
-- * PIPESIDE (string) - The side the pipe
--   is on. Can be the special value 'auto'
--   to select the side automatically.
-- * RESOURCE (table) - Specifies the
--   resource to request. The following keys
--   are required:
--   * itemName (string) - The name of the
--     item to request.
--   * modName (string) - The name of the
--     mod the item is from. Used to
--     disambiguate.
--   * amount (number) - The amount of the
--     item to request.
--   * allowPartial (boolean) - Whether a
--     partial request is allowed.
--
-- The return value is a table with one key
-- "status" whose value is an integer return
-- code. The following codes are defined:
-- * 0 - the request successfully completed
-- * 1 - no items match the given query
-- * 2 - insufficient supply of the item

local t = loadfile("libt")()
  or error("failed to load libt")

local PIPESIDE, RESOURCE = ...

-- RESOURCE is a table with the format:
-- itemName (string)
-- modName (string)
-- amount (number)
-- allowPartial (boolean)

local PIPE = nil

if PIPESIDE == "auto" then
  PIPE = peripheral.find("LogisticsPipes:Request")
else
  PIPE = peripheral.wrap(PIPESIDE)
end

local items = PIPE.getAvailableItems()

local function matchItem(item)
  return item.getName() == RESOURCE.itemName and
    item.getModName() == RESOURCE.modName
end

local function decideRequestQuantity(qty)
  if qty < RESOURCE.amount then
    return RESOURCE.allowPartial and qty or nil
  else
    return RESOURCE.amount
  end
end

local function respond(status)
  return {
    status = status,
  }
end

for item in t.from(items) do
  local iid = item.getValue1()
  local qty = item.getValue2()

  if matchItem(iid) then
    local reqQty = decideRequestQuantity(qty)
    if reqQty == nil then
      -- item match, but insufficient amount
      return respond(2)
    end

    if reqQty == 0 then
      return respond(2)
    end

    local r = PIPE.makeRequest(iid, reqQty)--, true)
    print("hi")
    print(r)

    -- completed successfully
    return respond(0)
  end
end

return respond(1)

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45 tw=44
