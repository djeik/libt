local RECIPE = ...

local t = loadfile("libt")()
  or error("failed to load libt")

local tput = t.requireStrict('libtput')
local reply = t.requireStrictTg('libreply')
reply.clearReplies()
local rmi = t.requireStrictTg("librmi")
local lpNetwork = rmi.bind("inventory-manager")

local chest = peripheral.wrap("bottom")

local l2g = {
  [1]=1,
  [2]=2,
  [3]=3,
  [4]=5,
  [5]=6,
  [6]=7,
  [7]=9,
  [8]=10,
  [9]=11,
}

local stacks = chest.getAllStacks()

for srcslot, itemthere in pairs(stacks) do
  for dstslot, item in pairs(RECIPE.shape) do
    turtle.select(l2g[dstslot])
    local basic = itemthere.basic()
    if item.idname == basic.id and
      (item.data == nil or item.data == basic.dmg) then
      local missing = (RECIPE.times or 1) - turtle.getItemCount()
      if missing > 0 then
        turtle.suckDown(missing)
      end
    end
  end
end

local function notDone()
  for i=1,16 do
    if turtle.getItemCount(i) > 0 then
      return true
    end
  end
  return false
end

local iid = nil
turtle.select(16)

while notDone() do
  if not turtle.craft() then
    error('craft failed!')
  end
  iid = turtle.getItemDetail(16)
  turtle.dropDown()
end

local items = lpNetwork.listResources()

local expectedItems = {}
for a in t.from(items) do
  if a.idname == iid.name and a.data == iid.damage then
    local s = textutils.serialize({
      idname = a.idname,
      data = a.data,
    })
    expectedItems[s] = a.amount + iid.count
  end
end

local extractChest = tput.loadfile('rmi/extractChest')
extractChest('down', {'bottom'})

if not lpNetwork.pipeAwaitItems(expectedItems, 7) then
  error('timeout while waiting for outputs to arrive')
end

return true

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45 tw=44
