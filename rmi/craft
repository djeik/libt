local RECIPE = ...

local t = loadfile("libt")()
  or error("failed to load libt")

local tput = t.requireStrict('libtput')
local reply = t.requireStrictTg('libreply')
reply.clearReplies()
local rmi = t.requireStrictTg("librmi")
local lpNetwork = rmi.bind("inventory-manager")

local chest = peripheral.wrap("bottom")

local l2g = {
  [1]=1,
  [2]=2,
  [3]=3,
  [4]=5,
  [5]=6,
  [6]=7,
  [7]=9,
  [8]=10,
  [9]=11,
}

local stacks = chest.getAllStacks()

print(textutils.serialize(RECIPE.shape))

for srcslot, itemthere in pairs(stacks) do
  for dstslot, item in pairs(RECIPE.shape) do
    print(item, ' == ', itemthere.basic().id)
    if item == itemthere.basic().id then
      turtle.select(l2g[dstslot])
      turtle.suckDown(1)
    end
  end
end

turtle.select(16)
if not turtle.craft() then
  error('craft failed!')
end
local iid = turtle.getItemDetail(16)
turtle.dropDown()

local items = lpNetwork.listResources()

local expectedItems = {}
for t in t.from(items) do
  if t.idname == iid.name then
    expectedItems[t.idname] = t.amount + iid.count
  end
end

print(textutils.serialize(expectedItems))

local extractChest = tput.loadfile('rmi/extractChest')
extractChest('down', {'bottom'})

if not lpNetwork.pipeAwaitItems(expectedItems, 7) then
  error('timeout while waiting for outputs to arrive')
end

return true

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45 tw=44
