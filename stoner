local t = loadfile("libt")()
  or error("Failed to load libt.")
local srcSide = "front"
local dstSide = "bottom"

local srcChest = peripheral.wrap(srcSide)
local dstChest = peripheral.wrap(dstSide)
local srcSize = srcChest.getInventorySize()
local dstSize = dstChest.getInventorySize()


local slots = {
  2, 3, 5, 6, 7, 9, 10, 11
}

local function cleanInventory()
  for i=1,16 do
    if turtle.getItemCount(i) > 0 then
      turtle.select(i)
      turtle.drop()
    end
  end
end

local function condenseCobblestone()
  local q = turtle.getItemCount(1)
  if q % 9 ~= 0 then
    print("Trying to condense stuff not multiple of nine.")
    return false
  end
  local q = math.floor(q / 9)
  for i, slot in ipairs(slots) do
    turtle.transferTo(slot, q)
  end
  return true
end

local function isCompressible(stack)
  return stack.qty >= 9 and (
    stack.name == "cobblestone"
    or
    stack.name == "gravel"
    or
    (
      stack.name == "cobblestone_compressed"
      and
      not stack.ore_dict.compressedGravel2x
      and
      not stack.ore_dict.compressedCobblestone8x
      and
      not stack.ore_dict.compressedDirt4x
    )
    or
    stack.name == "dirt"
  )
end

local function main()
  while true do
    srcChest.condenseItems()
    t.sortChest(srcChest)
    for i=1,srcSize do
      local r, stack = pcall(function()
        return srcChest.getStackInSlot(i)
      end)
      if r and stack and isCompressible(stack) then
        local q = stack.qty - (stack.qty % 9)
        srcChest.swapStacks(i, 1)
        turtle.select(1)
        turtle.suck(q)
        if condenseCobblestone() then
          turtle.select(16)
          turtle.craft()
          turtle.dropDown()
          if dstChest ~= nil then
            t.sortChest(dstChest)
          end
        else
          cleanInventory()
        end
      else
        print("Stack ", i, " is invalid.")
      end
    end
    sleep(1)
  end
end

while true do
  cleanInventory()
  pcall(main)
end

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45 tw=44
