local t = loadfile("libt")()

local tnet = {}

-- | Collection of status codes for T
-- networking stack.
tnet.statusCode = {
  -- | The processing time on the server is
  -- likely to exceed the timeout on the
  -- client.
  WAIT = 100,
  -- | The action completed successfully.
  OK = 200,
  -- | The desired action is temporarily
  -- available under a different name.
  FOUND = 310,
  -- | The desired action is permanently
  -- available under a different name.
  MOVED = 320,
  -- | The data sent with the action is
  -- inappropriate.
  BAD = 400,
  -- | The data sent with the action is
  -- correct, but the server failed to
  -- process the action.
  FAIL = 500,
  -- | The server failed to process the
  -- request right now, but can do so at a
  -- later time.
  REPEAT = 510,
  -- | When returned by a callback, the
  -- libtnet framework will not send a
  -- response to the client.
  IGNORE = 0,
  -- | The action timed out. This response
  -- is generated client-side.
  TIMEOUT = 1,
  -- | Abort the server after this request
  -- completes. The client will receive
  -- status FAIL.
  ABORT = -1
}

-- | Message type for service discovery
-- broadcasts
tnet.DISCOVER = "DISCOVER"

-- | Count messages sent by this instance of
-- T.
tnet.MESSAGE_COUNTER = 0

-- | Default time to wait before giving up
-- on T network requests or service
-- discoveries.
tnet.DEFAULT_TIMEOUT = 2

-- | Channel to send discovery broadcasts
-- on.
tnet.DISCOVER_CHAN = 3

-- | Channel to offer services on. This
-- channel is used for responses to
-- discovery broadcasts.
tnet.OFFER_CHAN = 4

-- | Channel to send requests on.
tnet.REQUEST_CHAN = 5

-- | Channel to send responses on.
tnet.RESPONSE_CHAN = 6

-- | Creates a reply code, which is based on
-- the computer ID and the current message
-- counter value. These IDs are unique, and
-- are sent along with requests from the
-- client.
-- The server is required to include the
-- reply code in the response, which ties it
-- to a particular request. This allows
-- clients to filter out other traffic.
function makeReplyCode()
  local code =
    tostring(os.getComputerID()) ..
    "-" ..
    tostring(t.MESSAGE_COUNTER)
  t.MESSAGE_COUNTER = t.MESSAGE_COUNTER + 1
  return code
end

-- | Parses a libtnet request string into
-- the action, replyCode, and data sections.
-- The result is a table with the entries:
-- * action
-- * replyCode
-- * data
function parseRequest(request)
  local match = string.gmatch(
    request,
    "(%S+)%s+(%S+)%s+(.+)"
  )
  local action, replyCode, data = match()
  local result = {
    action = action,
    replyCode = replyCode,
    data = data
  }
  return result
end

-- | Parses a libtnet response string into
-- the replyCode, status, and data sections.
-- The result is a table with the entries:
-- * replyCode
-- * status
-- * data
function parseResponse(response)
  local match = string.gmatch(
    response,
    "(%S+)%s+(%S+)%s+(.+)"
  )
  local replyCode, status, data = match()
  return {
    replyCode = replyCode,
    status = tonumber(status),
    data = textutils.unserialize(data)
  }
end

-- | Parses a libtnet discovery broadcast
-- into the replyCode section.
-- The result is a table with one entry:
-- * replyCode
function parseDiscover(offer)
  local match = string.gmatch(
    offer,
    t.DISCOVER .. "%s+(%S+)"
  )
  local replyCode = match()
  return {
    replyCode = replyCode
  }
end

function parseOffer(offer)
  local match = string.gmatch(
    msg,
    "(%S+)%s+(.+)"
  )
  local replyCode, data = match()
  if replyCode == nil or data == nil then
    return nil
  else
    local handlers = textutils.unserialize(
      data
    )
    if handlers == nil then
      return nil
    else
      return {
        replyCode = replyCode,
        handlers = handlers
      }
    end
  end
end

-- | Augments a regular modem with functions
-- to perform libtnet actions.
function tnet.init(modem)
  -- | Association of action -> action that
  -- is a cache of MOVED responses.
  local moved = {}

  -- | Sets up an event loop to respond to
  -- discovery broadcasts by sending an
  -- offer message listing the given
  -- handlers.
  function modem.offer(handlers)
    local done = false
    modem.open(t.DISCOVER_CHAN)
    while not done do
      local e, side, sChan, rChan, msg =
        os.pullEvent()
      if e == "tnet_finish" then
        done = true
      elseif e == "modem_message" then
        if sChan == t.DISCOVER_CHAN then
          local offer = parseDiscover(msg)
          if offer ~= nil then
            modem.transmit(
              rChan, 0,
              offer.replyCode .. " " ..
              textutils.serialize(
                handlers
              )
            )
          else
            print(
              "failed to parse discover"
            )
          end
        end
      end
    end
    modem.close(t.DISCOVER_CHAN)
  end

  -- | Sends a discovery broadcast to
  -- determine the available actions in the
  -- network.
  -- Accepts an optional timeout argument,
  -- in seconds. Note that the timeout is
  -- essential, since there's no way of
  -- knowing when to really stop listening.
  -- ComputerCraft is fast-ish, so small
  -- values are usually fine. The default is
  -- fairly generous, so you may want to
  -- take something smaller.
  -- Prints a message to the terminal if a
  -- server replies with a malformed offer.
  function modem.discover(timeout)
    timeout = timeout or t.DEFAULT_TIMEOUT
    local replyCode = makeReplyCode()
    modem.open(t.OFFER_CHAN)
    modem.transmit(
      t.DISCOVER_CHAN, t.OFFER_CHAN,
      t.DISCOVER .. " " .. replyCode
    )
    local offers = {}
    local fn = parallel.waitForAny(
      function()
        while true do
          local _, side, sChan, rChan, msg =
            os.pullEvent("modem_message")
          if sChan == t.OFFER_CHAN then
            local offer = parseOffer(msg)
            if offer ~= nil then
              if offer.replyCode ==
                  replyCode
              then
                t.extend(
                  offers,
                  offer.handlers
                )
              end
            else
              print("failed to parse offer")
            end
          end
        end
      end,
      function()
        sleep(timeout)
      end
    )
    return offers
  end

  -- | Sends a request for the network to
  -- perform an action on some data.
  -- The data must be a table.
  -- If no data is provided, then an an
  -- empty table is sent.
  -- Something has to
  -- be sent due to the shitty regex-based
  -- parser that we use.
  function modem.request(
      action,
      data,
      timeout
  )
    if moved[action] ~= nil then
      return modem.request(
        moved[action],
        data,
        timeout
      )
    end

    data = data or {}
    timeout = timeout or t.DEFAULT_TIMEOUT

    -- save the initial timeout value since
    -- the timeout can be changed by WAIT
    local initialTimeout = timeout

    local replyCode = makeReplyCode()

    modem.open(t.RESPONSE_CHAN)
    modem.transmit(
      t.REQUEST_CHAN, t.RESPONSE_CHAN,
      action .. " " ..
      replyCode .. " " ..
      textutils.serialize(data)
    )

    -- the response produced by the server
    local response = nil

    -- use the parallel API to deal with
    -- timeouts.
    local fn = parallel.waitForAny(
      function()
        while response == nil do
          local _, side, sChan,
            rChan, msg =
              os.pullEvent("modem_message")

          if sChan == t.RESPONSE_CHAN then
            response =
              parseResponse(msg)

            -- if we get responses to
            -- requests we didn't send, keep
            -- looping
            if response.replyCode ~=
                replyCode
            then
              response = nil
            else
              -- if the server returns WAIT
              if response.status ==
                  tnet.statusCode.WAIT
              then
                -- boost the timeout
                timeout = timeout +
                  response.data.timeout
                -- keep looping
                response = nil
              end
            end
          end
        end
      end,
      function()
        while timeout > 0 do
          -- timeout might increase
          -- concurrently due to WAIT
          -- while we're asleep, so we save
          -- the current timeout before we
          -- go to sleep
          local time = timeout
          sleep(time)
          -- decrease the possibly new
          -- timeout by the time we spent
          -- sleeping
          timeout = timeout - time
        end
      end
    )
    modem.close(t.RESPONSE_CHAN)

    if fn == 2 then
      response = {
        status = tnet.statusCode.TIMEOUT
      }
      return response
    end

    if response.status ==
        tnet.statusCode.MOVED
    then
      moved[action] =
        response.data.action
      return modem.request(
        response.data.action,
        request,
        initialTimeout
      )
    end

    if response.status ==
        tnet.statusCode.FOUND
    then
      return modem.request(
        response.data.action,
        request,
        initialTimeout
      )
    end

    if response.status ==
        tnet.statusCode.REPEAT
    then
      sleep(response.data.timeout)
      return modem.response(
        action,
        request,
        timeout
      )
    end

    return response.status, response.data
  end

  -- | Sets up an event loop to await for
  -- libtnet requests. Requests are
  -- dispatched to handlers based on the
  -- `action` parameter of the request.
  -- Each handler is a callback function
  -- taking one argument, which is the table
  -- sent by the client or an empty table in
  -- case nothing was sent.
  -- Callback functions must return exactly
  -- two values. The first is the libtnet
  -- status code from the `t.statusCode`
  -- table, and the second is a table to
  -- return to the client.
  function modem.listen(handlers)
    local fn = parallel.waitForAny(
      function()
        modem.offer(t.keys(handlers))
      end,
      function()
        modem.open(t.REQUEST_CHAN)
        local done = false
        while not done do
          local e, side, sChan,
            rChan, msg =
            os.pullEvent()
          if e == "tnet_finish" then
            done = true
          elseif e == "modem_message" then
            local request =
              parseRequest(msg)
            local handler =
              handlers[request.action] or handlers["*"]
            if handler then
              local status, data =
                handler(
                  textutils.unserialize(
                    request.data
                  )
                )

              if status ==
                  t.statusCode.ABORT
              then
                done = true
                status = t.statusCode.FAIL
              end

              if status ~=
                  t.statusCode.IGNORE
              then
                modem.transmit(
                  rChan,
                  0,
                  request.replyCode .. " " ..
                  tostring(status) .. " " ..
                  textutils.serialize(data)
                )
              end
            end
          end
        end
      end
    )
  end
end

-- Export the parsing functions in case
-- someone wants access to the low-level
-- API.
tnet.parse = {}
tnet.parse.request = parseRequest
tnet.parse.response = parseResponse
tnet.parse.offer = parseOffer
tnet.parse.discover = parseDiscover

return tnet

-- vim: ft=lua shiftwidth=2 expandtab colorcolumn=45 tw=44
